qUI
q()
x<-1:4
lapply(x, runif, min=0, max=10)
x<-list(a=matrix(1:4,2,2), b=matrix(1:6,3,2))
x
lapply(x, function(elt) elt[,1])
lapply(x, function(el) elt[,1])
lapply(x, function(elt) el[,1])
lapply(x, function(elt) elt[,1])
sapply(x, function(elt) elt[,1])
sapply(x, runif, min=0, max=10)
sapply(x, runif, min=0, max=10)
sapply(x, runif, min=0, max=10)
sapply(x, runif, min=0, max=10)
x<-list(a=1:4,b=rnorm(10),c=rnorm(20,1),d=rnorm(100,5))
lapply(x,mean)
lapply(x,mean)
sapply(x,mean)
sapply(x,mean)
sapply(x,mean)
sapply(x,mean)
sapply(x,mean)
sapply(x,mean)
lapply(x,mean)
lapply(x,mean)
lapply(x,mean)
lapply(x,mean)
str(apply)
x<-matrix(rnorm(200),20,10)
apply(x,2,mean)
apply(x,2,mean)
apply(x,2,mean)
apply(x,1,sum)
?apply
rowSum=apply(x,1,sum)
rowSums=apply(x,1,sum)
apply(x,1,quantile,probs=c(0.25,0.75))
?lapply
?apply
a<-array(rnorm(2*2*10),c(2,2,10))
apply(a,c(1,2),mean)
rowMeans(a,dims=2)
str(mapply)
list(rep(1,4),rep(2,3),rep(3,2),rep(4,1))
mapply(rep,1:4,4:1)
noise<-function(n,mean,sd)
{rnorm(n,mean,sd)}
noise(5,1,2)
noise(1:5,1:5,2)
mapply(noise,1:5,1:5,2)
list(noise(1,1,2),noise(2,2,2),noise(3,3,2),noise(4,4,2),noise(5,5,2))
str(tapply)
?tapply
x<-c(rnorm(10),runif(10),rnorm(10,1)))
x<-c(rnorm(10),runif(10),rnorm(10,1))
f<-gl(3,10)
?gl
?rnorm
x
f
tapply(x,f,mean)
x<-c(rnorm(10),runif(10),rnorm(10,1))
tapply(x,f,mean)
tapply(x,f,mean, simplify=FALSE)
tapply(x,f,range)
?tapply
?split
split(x,f)
x
x<-c(rnorm(10),runif(10),rnorm(10,1))
x
split(x,f)
lapply(split(x,f),mean)
tapply(x,f,mean)
library(datasets)
head(alrquality)
head(airquality)
s<-split(airquality,airquality$Month)
lapply(s,function(x) colMeans(x,c("Ozone","Solar.R","Wind"))
)
lapply(s,function(x) colMeans(x,c("Ozone","Solar.R","Wind")))
sapply(s,function(x) colMeans(x,c("Ozone","Solar.R","Wind")))
s<-split(airquality,airquality$Month)
s
?lapply
lapply(s,function(x) colMeans(x[],c("Ozone","Solar.R","Wind")])
lapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")])
)
lapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]),na.rm=TRUE)
sapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")],na.rm=TRUE))
s
x<-rnorm(10)
f1<-gl(2,5)
f2<-gl(5,2)
f2
f1
interaction(f1,f2)
str(split(x,list(f1,f2)))
x
str(split(x,list(f1,f2)),drop=TRUE)
str(split(x,list(f1,f2)))
str(split(x,list(f1,f2)),drop=TRUE)
str(split(x,list(f1,f2)),drop=FALSE)
str(split(x,list(f1,f2)),drop=TRUE)
str(split(x,list(f1,f2)),drop=FALSE)
str(split(x,list(f1,f2)),drop=TRUE)
str(split(x,list(f1,f2)),drop=TRUE)
log(-1)
printmessage<-functionx{if(x>0) print ('x>0') else print('x<=0)' invisible(x))}
printmessage<-functionx{if(x>0) print ('x>0') else print('x<=0)' invisible(x)}
printmessage<-function(x){if(x>0) print ('x>0') else print('x<=0)' invisible(x)}
printmessage<-function(x) {if (x>0) print ('x>0') else print('x<=0)' invisible(x)}
printmessage<-function(x) {if (x>0) print ('x>0') else print('x<=0)' invisible(x)}
printmessage<-function(x) {if (x>0) print ('x>0') else print('x<=0') invisible(x)}
printmessage<-function(x) {
if (x>0)
print ('x>0')
else
print('x<=0')
invisible(x)}
printmessage(1)
printmessage(-1)
printmessage(na)
printmessage(11)
printmessage(na)
printmessage2<-function(x) {
if (is.na(x))
print('x is missing')
else if (x>0)
print ('x>0')
else
print('x<=0')
invisible(x)}
printmessage2()
printmessage2(1)
printmessage2(-1)
printmessage2(-)
printmessage2(na)
x<-log(-1)
printmessage2(x)
printmessage2(n)
printmessage2(na)
printmessage2(a)
printmessage2(d)
printmessage2(0)
printmessage2(a)
traceback
debug()
debug
mean(x)
exit
quit
q*()
q*()
q()
library(datasets)
data("iris")
tapply(iris$Sepal.Length,iris$Species,mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
data("mtcars")
sapply(mtcars, cyl, mean)
tapply(mtcars$hp,mtcars$cyl,mean)
209.21429-82.63636
invisible(x)
x <- (1:10,nrow=2,ncol=5)
x <- c(1:10,nrow=2,ncol=5)
x
x <- matrix(1:10,nrow=2,ncol=5)
x
invisible(x)
x
inv<-invisible(x)
inv
inverse.rle(x)
cachesolve(x)
source('~/R/coursera/course3.R')
cachesolve(x)
x$getinv
makeCacheMatrix(x)
cachesolve(x)
class(x)
source('~/R/coursera/course3.R')
solve(x)
?solve
x <- matrix(1:16,nrow=4,ncol=4)
x
solve(x)
solve(x,x)
c=rbind(c(1, -1/4), c(-1/4, 1))
solve(c)
c
cachesolve(c)
x$getinv
x
makeCacheMatrix(x)
makeCacheMatrix(c)
cachesolve(c)
cachesolve(x)
getElement(x,"getinv")
x[[getinv]]
x[["getinv"]]
makeCacheMatrix(x)
cachesolve(x)
c <- as.frame(c)
c <- as.data.frame(c)
source('~/R/coursera/course3.R')
c
class(c)
makeCacheMatrix(c)
cachesolve(c)
solve(c)
source('~/R/coursera/course3.R')
source('~/R/coursera/course3.R')
makeVector(x)
cachemean(x)
x
mean(x)
mean(x)
mean(x)
mean(x)
solve(x)
x=c(1:1000)
mean()
mean(x)
mean(x)
mean(x)
mean(x)
mean(x)
getmean(x)
x$getmean(x)
source('~/R/coursera/course3.R')
source('~/R/coursera/course3.R')
source('~/R/coursera/course3.R')
pwd
getpwd()
getwd()
ls
dir
dir()
cd R
chdir R
chdir (R)
cd ("R")
load("~/R/coursera/ProgrammingAssignment2/cachematrix.R")
source('~/R/coursera/ProgrammingAssignment2/cachematrix.R')
cd ~/R
setwd("~/R/coursera/ProgrammingAssignment2")
ls
ls ()
ls -al
ls ()
source('~/R/coursera/ProgrammingAssignment2/cachematrix.R')
mymat <- matrix(c(1,0,5,2,1,6,3,4,0), nrow=3, ncol=3)
mcm <- makeCacheMatrix(mymat)
mcm
mycat
mymat
cacheSolve(mcm)
cacheSolve(mcm)
inv_x <- makeCacheMatrix(x)
cacheSolve(inv_x)
x
inv_c <- makeCacheMatrix(c)
c
inv_c
cacheSolve(inv_c)
c <- matrix(cnorm(1:9),nrow=3)
c <- matrix(norm(1:9),nrow=3)
c <- matrix(norm(9),nrow=3)
c <- matrix(rnorm(9),nrow=3)
c <- matrix(rnorm(9),nrow=3,ncol=3)
c
cacheSolve(c)
inv.c<-makeCacheMatrix(c)
cacheSolve(inv.c)
cacheSolve(inv.c)
source('~/R/coursera/ProgrammingAssignment2/cachematrix.R')
